id: synchronize_signals_module_synchronize_signals
label: Synchronize Signals
category: '[Custom Modules]'

parameters:
- id: fft_size
  label: FFT Size
  dtype: int
  default: '32768'
- id: synchronize
  label: Synchronization State
  dtype: bool
  default: 'False'
  options: ['False', 'True']
- id: num_ports
  label: Number of ports
  dtype: int
  default: '2'

inputs:
- domain: stream
  dtype: complex
  vlen: ${ fft_size }
  multiplicity: ${ num_ports }

outputs:
- domain: stream
  dtype: complex
  vlen: ${ fft_size }
  multiplicity: ${ num_ports }

asserts:
- ${ fft_size > 0 }

templates:
  imports: from gnuradio import synchronize_signals_module
  make: |-
    synchronize_signals_module.synchronize_signals(${fft_size},${synchronize},${num_ports})
    self.${id}.set_synchronization(${synchronize})
  callbacks:
  - set_synchronization(${synchronize})

cpp_templates:
    includes: ['#include <gnuradio/synchronize_signals_module/synchronize_signals.h>']
    declarations: 'synchronize_signals_module::synchronize_signals::sptr ${id};'
    make: |-
        this->${id} = synchronize_signals_module::synchronize_signals::make(${fft_size},${synchronize},${num_ports});
        self->${id}.set_synchronization(${synchronize});
    callbacks:
    - set_synchronization(${synchronize})
    
file_format: 1
